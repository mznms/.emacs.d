# -*- mode: snippet -*-
# name: UnionFind
# key: unionfind
# --
class UnionFind {
public:
    vector<int> parents;
    vector<int> sizes;

    UnionFind() = default;

    explicit UnionFind(int N)
        : parents(N)
        , sizes(N, 1)
        {
            for (int i = 0; i < N; i++) {
                parents[i] = i;
            }
        }

    int root(int x)
        {
            if (parents[x] == x) {
                return x;
            }
            return parents[x] = root(parents[x]);
        }

    void unite(int x, int y)
        {
            int rx = root(x);
            int ry = root(y);
            if (rx != ry) {
                if (sizes[rx] < sizes[ry]) {
                    swap(rx, ry);
                }
                sizes[rx] += sizes[ry];
                parents[ry] = rx;
            }
        }

    bool same(int x, int y)
        {
            int rx = root(x);
            int ry = root(y);
            return rx == ry;
        }

    int size(int i)
        {
            return sizes[root(i)];
        }
};